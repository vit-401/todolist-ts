{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","app/authReducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","email","password","rememberMe","captcha","handleServerAppError","data","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","logoutTC","res","resultCode","catch","status","isInitialized","setIsInitializedAC","initializeAppTC","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","action","updateTaskAC","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","todolist","items","setTasksAC","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","entityStatus","map","style","paddingTop","Button","TodolistsList","todolists","useSelector","state","auth","removeTaskAC","removeTaskTC","item","addTaskTC","changeStatus","newTitle","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","to","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","connect","loginTC","formik","useFormik","initialValues","validate","values","errors","test","onSubmit","resetForm","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","from","top","textAlign","width","CircularProgress","rootReducer","combineReducers","todoListId","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.f6ac5389.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    // headers: {\r\n    //     'API-KEY': '024c72d0-5556-46a2-a9a9-4eba6c2facdb'\r\n    // }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(email: string, password: string, rememberMe: boolean, captcha?: boolean) {\r\n        return instance.post<ResponseType>(`/auth/login`, {\r\n            email,\r\n            password,\r\n            rememberMe,\r\n            captcha\r\n        });\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<DataAuthMe>>(`/auth/me`)\r\n    },\r\n    logout(){\r\n        return instance.delete<ResponseType<{}>>(`/auth/login`)\r\n    }\r\n}\r\n\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\ntype DataAuthMe = {\r\n    id: number,\r\n    email: string,\r\n    login: string\r\n}","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"./app-reducer\";\r\nimport {authAPI} from \"../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\n\r\nexport const loginTC = (email: string, password: string, rememberMe: boolean, captcha?: boolean) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(email, password, rememberMe)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                dispatch(setIsLoggedInAC(false))\r\n                debugger\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        }).catch((error) => {\r\n        dispatch(setIsLoggedInAC(false))\r\n        handleServerNetworkError(error, dispatch);\r\n    })\r\n}\r\n\r\n\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusActionType | SetAppErrorActionType\r\n","import {authAPI} from \"../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setIsLoggedInAC} from \"./authReducer\";\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/APP-INITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setIsInitializedAC = (isInitialized: boolean) => ({\r\n    type: 'APP/APP-INITIALIZED',\r\n    isInitialized\r\n} as const)\r\n\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then((res) => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true));\r\n            dispatch(setIsInitializedAC(true));\r\n        } else {\r\n            dispatch(setIsLoggedInAC(false));\r\n        }\r\n        dispatch(setIsInitializedAC(true));\r\n    })\r\n}\r\n\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type setIsInitializedACType = ReturnType<typeof setIsInitializedAC>\r\n\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | setIsInitializedACType\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status } as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC('loading'))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType>\r\n","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType>((state) => state.auth.isLoggedIn)\r\n\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC} from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null));\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {connect, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"../../app/authReducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Redirect} from 'react-router-dom';\r\n\r\nconst Login = (props: any) => {\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType>((state) => state.auth.isLoggedIn)\r\n\r\n\r\n    type FormikErrorType = {\r\n        email?: string\r\n        password?: string\r\n        rememberMe?: boolean\r\n    }\r\n\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values: FormikErrorType) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (values.password && values.password.length < 4) {\r\n                errors.password = 'Legth of password is incorrect'\r\n            } else if (!values.password) {\r\n                errors.password = 'Required'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            props.loginTC(values.email, values.password, values.rememberMe)\r\n            formik.resetForm()\r\n        },\r\n    })\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            type=\"email\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {\r\n                            formik.touched.email &&\r\n                            formik.errors.email ? <div style={{color: 'red'}}>{formik.errors.email}</div> : null\r\n                        }\r\n\r\n\r\n                        <TextField\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            type=\"password\"\r\n                            {...formik.getFieldProps('password')}\r\n\r\n                        />\r\n                        {formik.touched.password && formik.errors.password ?\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                            />}\r\n\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n\r\nexport default connect(null, {loginTC})(Login)\r\n","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {connect, useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport {Redirect, Route, Switch} from 'react-router-dom'\r\nimport Login from \"../features/Login/Login\";\r\nimport {logoutTC} from \"./authReducer\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n    initializeAppTC: any\r\n    logoutTC: any\r\n}\r\n\r\nfunction App(props: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType,boolean>((state) => state.app.isInitialized)\r\n\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n\r\n\r\n    const logOut = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isInitialized ? <Button onClick={logOut} color=\"inherit\"> Log out</Button> : null}\r\n\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <TodolistsList demo={false}/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n\r\n                    <Route path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(null, {initializeAppTC, logoutTC})(App)\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from \"./authReducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth:authReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport App from './app/App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}