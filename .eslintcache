[{"C:\\Users\\screen\\Desktop\\todolist-ts\\src\\reportWebVitals.ts":"1","C:\\Users\\screen\\Desktop\\todolist-ts\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx":"2","C:\\Users\\screen\\Desktop\\todolist-ts\\src\\index.tsx":"3","C:\\Users\\screen\\Desktop\\todolist-ts\\src\\app\\store.ts":"4","C:\\Users\\screen\\Desktop\\todolist-ts\\src\\app\\App.tsx":"5","C:\\Users\\screen\\Desktop\\todolist-ts\\src\\app\\app-reducer.ts":"6","C:\\Users\\screen\\Desktop\\todolist-ts\\src\\app\\authReducer.ts":"7","C:\\Users\\screen\\Desktop\\todolist-ts\\src\\features\\TodolistsList\\todolists-reducer.ts":"8","C:\\Users\\screen\\Desktop\\todolist-ts\\src\\features\\TodolistsList\\tasks-reducer.ts":"9","C:\\Users\\screen\\Desktop\\todolist-ts\\src\\features\\TodolistsList\\TodolistsList.tsx":"10","C:\\Users\\screen\\Desktop\\todolist-ts\\src\\features\\Login\\Login.tsx":"11","C:\\Users\\screen\\Desktop\\todolist-ts\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx":"12","C:\\Users\\screen\\Desktop\\todolist-ts\\src\\api\\todolists-api.ts":"13","C:\\Users\\screen\\Desktop\\todolist-ts\\src\\utils\\error-utils.ts":"14","C:\\Users\\screen\\Desktop\\todolist-ts\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx":"15","C:\\Users\\screen\\Desktop\\todolist-ts\\src\\components\\AddItemForm\\AddItemForm.tsx":"16","C:\\Users\\screen\\Desktop\\todolist-ts\\src\\components\\EditableSpan\\EditableSpan.tsx":"17"},{"size":440,"mtime":1618493988846,"results":"18","hashOfConfig":"19"},{"size":1773,"mtime":1618493988841,"results":"20","hashOfConfig":"19"},{"size":718,"mtime":1618500244726,"results":"21","hashOfConfig":"19"},{"size":1164,"mtime":1618493988834,"results":"22","hashOfConfig":"19"},{"size":2568,"mtime":1618500183611,"results":"23","hashOfConfig":"19"},{"size":2197,"mtime":1618493988832,"results":"24","hashOfConfig":"19"},{"size":2135,"mtime":1618493988833,"results":"25","hashOfConfig":"19"},{"size":4586,"mtime":1618497711399,"results":"26","hashOfConfig":"19"},{"size":5514,"mtime":1618497788785,"results":"27","hashOfConfig":"19"},{"size":4026,"mtime":1618494948426,"results":"28","hashOfConfig":"19"},{"size":3797,"mtime":1618496583505,"results":"29","hashOfConfig":"19"},{"size":1092,"mtime":1618493988838,"results":"30","hashOfConfig":"19"},{"size":3091,"mtime":1618499666838,"results":"31","hashOfConfig":"19"},{"size":811,"mtime":1618493988847,"results":"32","hashOfConfig":"19"},{"size":4157,"mtime":1618497788741,"results":"33","hashOfConfig":"19"},{"size":1530,"mtime":1618497907451,"results":"34","hashOfConfig":"19"},{"size":911,"mtime":1618497788728,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"qj48g6",{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"38"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"63","usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"38"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"C:\\Users\\screen\\Desktop\\todolist-ts\\src\\reportWebVitals.ts",[],["77","78"],"C:\\Users\\screen\\Desktop\\todolist-ts\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx",["79","80","81"],"import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","C:\\Users\\screen\\Desktop\\todolist-ts\\src\\index.tsx",[],"C:\\Users\\screen\\Desktop\\todolist-ts\\src\\app\\store.ts",[],"C:\\Users\\screen\\Desktop\\todolist-ts\\src\\app\\App.tsx",["82"],"import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {connect, useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport {Redirect, Route, Switch} from 'react-router-dom'\r\nimport Login from \"../features/Login/Login\";\r\nimport {logoutTC} from \"./authReducer\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n    initializeAppTC: any\r\n    logoutTC: any\r\n}\r\n\r\nfunction App(props: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType,boolean>((state) => state.app.isInitialized)\r\n\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n\r\n\r\n    const logOut = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isInitialized ? <Button onClick={logOut} color=\"inherit\"> Log out</Button> : null}\r\n\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <TodolistsList demo={false}/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n\r\n                    <Route path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(null, {initializeAppTC, logoutTC})(App)\r\n","C:\\Users\\screen\\Desktop\\todolist-ts\\src\\app\\app-reducer.ts",[],"C:\\Users\\screen\\Desktop\\todolist-ts\\src\\app\\authReducer.ts",[],"C:\\Users\\screen\\Desktop\\todolist-ts\\src\\features\\TodolistsList\\todolists-reducer.ts",[],"C:\\Users\\screen\\Desktop\\todolist-ts\\src\\features\\TodolistsList\\tasks-reducer.ts",["83"],"import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","C:\\Users\\screen\\Desktop\\todolist-ts\\src\\features\\TodolistsList\\TodolistsList.tsx",["84","85","86","87","88","89","90","91"],"import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType>((state) => state.auth.isLoggedIn)\r\n\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","C:\\Users\\screen\\Desktop\\todolist-ts\\src\\features\\Login\\Login.tsx",["92"],"import React from 'react'\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {connect, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"../../app/authReducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Redirect} from 'react-router-dom';\r\n\r\nconst Login = (props: any) => {\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType>((state) => state.auth.isLoggedIn)\r\n\r\n\r\n    type FormikErrorType = {\r\n        email?: string\r\n        password?: string\r\n        rememberMe?: boolean\r\n    }\r\n\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values: FormikErrorType) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (values.password && values.password.length < 4) {\r\n                errors.password = 'Legth of password is incorrect'\r\n            } else if (!values.password) {\r\n                errors.password = 'Required'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            props.loginTC(values.email, values.password, values.rememberMe)\r\n            formik.resetForm()\r\n        },\r\n    })\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            type=\"email\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {\r\n                            formik.touched.email &&\r\n                            formik.errors.email ? <div style={{color: 'red'}}>{formik.errors.email}</div> : null\r\n                        }\r\n\r\n\r\n                        <TextField\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            type=\"password\"\r\n                            {...formik.getFieldProps('password')}\r\n\r\n                        />\r\n                        {formik.touched.password && formik.errors.password ?\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                            />}\r\n\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n\r\nexport default connect(null, {loginTC})(Login)\r\n","C:\\Users\\screen\\Desktop\\todolist-ts\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx",[],"C:\\Users\\screen\\Desktop\\todolist-ts\\src\\api\\todolists-api.ts",[],"C:\\Users\\screen\\Desktop\\todolist-ts\\src\\utils\\error-utils.ts",[],"C:\\Users\\screen\\Desktop\\todolist-ts\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx",["93","94","95","96","97","98"],"import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","C:\\Users\\screen\\Desktop\\todolist-ts\\src\\components\\AddItemForm\\AddItemForm.tsx",[],"C:\\Users\\screen\\Desktop\\todolist-ts\\src\\components\\EditableSpan\\EditableSpan.tsx",[],{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","severity":1,"message":"104","line":15,"column":97,"nodeType":"105","endLine":15,"endColumn":130,"suggestions":"106"},{"ruleId":"103","severity":1,"message":"104","line":20,"column":8,"nodeType":"105","endLine":20,"endColumn":41,"suggestions":"107"},{"ruleId":"103","severity":1,"message":"104","line":24,"column":8,"nodeType":"105","endLine":24,"endColumn":41,"suggestions":"108"},{"ruleId":"103","severity":1,"message":"109","line":37,"column":8,"nodeType":"105","endLine":37,"endColumn":10,"suggestions":"110"},{"ruleId":"111","severity":1,"message":"112","line":5,"column":9,"nodeType":"113","messageId":"114","endLine":5,"endColumn":22},{"ruleId":"103","severity":1,"message":"115","line":37,"column":8,"nodeType":"105","endLine":37,"endColumn":10,"suggestions":"116"},{"ruleId":"103","severity":1,"message":"117","line":43,"column":8,"nodeType":"105","endLine":43,"endColumn":10,"suggestions":"118"},{"ruleId":"103","severity":1,"message":"117","line":48,"column":8,"nodeType":"105","endLine":48,"endColumn":10,"suggestions":"119"},{"ruleId":"103","severity":1,"message":"117","line":53,"column":8,"nodeType":"105","endLine":53,"endColumn":10,"suggestions":"120"},{"ruleId":"103","severity":1,"message":"117","line":58,"column":8,"nodeType":"105","endLine":58,"endColumn":10,"suggestions":"121"},{"ruleId":"103","severity":1,"message":"117","line":63,"column":8,"nodeType":"105","endLine":63,"endColumn":10,"suggestions":"122"},{"ruleId":"103","severity":1,"message":"117","line":68,"column":8,"nodeType":"105","endLine":68,"endColumn":10,"suggestions":"123"},{"ruleId":"103","severity":1,"message":"117","line":73,"column":8,"nodeType":"105","endLine":73,"endColumn":10,"suggestions":"124"},{"ruleId":"125","severity":1,"message":"126","line":58,"column":29,"nodeType":"127","messageId":"128","endLine":59,"endColumn":50,"fix":"129"},{"ruleId":"103","severity":1,"message":"130","line":34,"column":8,"nodeType":"105","endLine":34,"endColumn":10,"suggestions":"131"},{"ruleId":"103","severity":1,"message":"104","line":38,"column":8,"nodeType":"105","endLine":38,"endColumn":42,"suggestions":"132"},{"ruleId":"103","severity":1,"message":"104","line":45,"column":8,"nodeType":"105","endLine":45,"endColumn":54,"suggestions":"133"},{"ruleId":"103","severity":1,"message":"104","line":47,"column":95,"nodeType":"105","endLine":47,"endColumn":134,"suggestions":"134"},{"ruleId":"103","severity":1,"message":"104","line":48,"column":101,"nodeType":"105","endLine":48,"endColumn":140,"suggestions":"135"},{"ruleId":"103","severity":1,"message":"104","line":49,"column":107,"nodeType":"105","endLine":49,"endColumn":146,"suggestions":"136"},"no-native-reassign",["137"],"no-negated-in-lhs",["138"],"react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.","ArrayExpression",["139"],["140"],["141"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["142"],"@typescript-eslint/no-unused-vars","'setAppErrorAC' is defined but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'demo', 'dispatch', and 'isLoggedIn'. Either include them or remove the dependency array.",["143"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["144"],["145"],["146"],["147"],["148"],["149"],["150"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","noTargetBlank",{"range":"151","text":"152"},"React Hook useEffect has missing dependencies: 'demo', 'dispatch', and 'props.todolist.id'. Either include them or remove the dependency array.",["153"],["154"],["155"],["156"],["157"],["158"],"no-global-assign","no-unsafe-negation",{"desc":"159","fix":"160"},{"desc":"159","fix":"161"},{"desc":"159","fix":"162"},{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},{"desc":"163","fix":"167"},{"desc":"163","fix":"168"},{"desc":"163","fix":"169"},{"desc":"163","fix":"170"},{"desc":"163","fix":"171"},{"desc":"163","fix":"172"},{"desc":"163","fix":"173"},[2002,2002]," rel=\"noreferrer\"",{"desc":"174","fix":"175"},{"desc":"159","fix":"176"},{"desc":"159","fix":"177"},{"desc":"159","fix":"178"},{"desc":"159","fix":"179"},{"desc":"159","fix":"180"},"Update the dependencies array to be: [props]",{"range":"181","text":"182"},{"range":"183","text":"182"},{"range":"184","text":"182"},"Update the dependencies array to be: [dispatch]",{"range":"185","text":"186"},"Update the dependencies array to be: [demo, dispatch, isLoggedIn]",{"range":"187","text":"188"},{"range":"189","text":"186"},{"range":"190","text":"186"},{"range":"191","text":"186"},{"range":"192","text":"186"},{"range":"193","text":"186"},{"range":"194","text":"186"},{"range":"195","text":"186"},"Update the dependencies array to be: [demo, dispatch, props.todolist.id]",{"range":"196","text":"197"},{"range":"198","text":"182"},{"range":"199","text":"182"},{"range":"200","text":"182"},{"range":"201","text":"182"},{"range":"202","text":"182"},[765,798],"[props]",[1071,1104],[1261,1294],[1164,1166],"[dispatch]",[1323,1325],"[demo, dispatch, isLoggedIn]",[1496,1498],[1667,1669],[1872,1874],[2085,2087],[2286,2288],[2433,2435],[2612,2614],[1428,1430],"[demo, dispatch, props.todolist.id]",[1545,1579],[1810,1856],[1955,1994],[2097,2136],[2245,2284]]