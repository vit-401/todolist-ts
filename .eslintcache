[{"C:\\Users\\screen\\Desktop\\todolist-13\\src\\index.tsx":"1","C:\\Users\\screen\\Desktop\\todolist-13\\src\\reportWebVitals.ts":"2","C:\\Users\\screen\\Desktop\\todolist-13\\src\\state\\store.ts":"3","C:\\Users\\screen\\Desktop\\todolist-13\\src\\App.tsx":"4","C:\\Users\\screen\\Desktop\\todolist-13\\src\\state\\tasks-reducer.ts":"5","C:\\Users\\screen\\Desktop\\todolist-13\\src\\state\\todolists-reducer.ts":"6","C:\\Users\\screen\\Desktop\\todolist-13\\src\\Todolist.tsx":"7","C:\\Users\\screen\\Desktop\\todolist-13\\src\\AddItemForm.tsx":"8","C:\\Users\\screen\\Desktop\\todolist-13\\src\\EditableSpan.tsx":"9","C:\\Users\\screen\\Desktop\\todolist-13\\src\\Task.tsx":"10","C:\\Users\\screen\\Desktop\\todolist-13\\src\\stories\\todolists-api.stories.tsx":"11","C:\\Users\\screen\\Desktop\\todolist-13\\src\\stories\\NewComponent.tsx":"12","C:\\Users\\screen\\Desktop\\todolist-13\\src\\API\\todolist-api.ts":"13"},{"size":641,"mtime":1617194913177,"results":"14","hashOfConfig":"15"},{"size":425,"mtime":1617194913223,"results":"16","hashOfConfig":"15"},{"size":892,"mtime":1617194913290,"results":"17","hashOfConfig":"15"},{"size":4777,"mtime":1617194913134,"results":"18","hashOfConfig":"15"},{"size":3577,"mtime":1617194913305,"results":"19","hashOfConfig":"15"},{"size":2569,"mtime":1617194913323,"results":"20","hashOfConfig":"15"},{"size":3487,"mtime":1617194913270,"results":"21","hashOfConfig":"15"},{"size":1474,"mtime":1617194913105,"results":"22","hashOfConfig":"15"},{"size":952,"mtime":1617194913148,"results":"23","hashOfConfig":"15"},{"size":1603,"mtime":1617194913256,"results":"24","hashOfConfig":"15"},{"size":1734,"mtime":1617303160105,"results":"25","hashOfConfig":"15"},{"size":141,"mtime":1617215202134,"results":"26","hashOfConfig":"15"},{"size":1540,"mtime":1617306383437,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"15n8qdf",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\screen\\Desktop\\todolist-13\\src\\index.tsx",[],"C:\\Users\\screen\\Desktop\\todolist-13\\src\\reportWebVitals.ts",[],"C:\\Users\\screen\\Desktop\\todolist-13\\src\\state\\store.ts",[],"C:\\Users\\screen\\Desktop\\todolist-13\\src\\App.tsx",["61","62","63","64","65","66","67","68","69","70","71","72","73"],"import React, {useCallback, useReducer, useState} from 'react'\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC,\r\n    removeTodolistAC,\r\n    todolistsReducer\r\n} from './state/todolists-reducer';\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC, tasksReducer} from './state/tasks-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './state/store';\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch();\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const action = removeTaskAC(id, todolistId);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const action = addTaskAC(title, todolistId);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const changeStatus = useCallback(function (id: string, isDone: boolean, todolistId: string) {\r\n        const action = changeTaskStatusAC(id, isDone, todolistId);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const action = changeTaskTitleAC(id, newTitle, todolistId);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const action = removeTodolistAC(id);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const action = changeTodolistTitleAC(id, title);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const action = addTodolistAC(title);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={allTodolistTasks}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\screen\\Desktop\\todolist-13\\src\\state\\tasks-reducer.ts",["74"],"import {TaskType} from '../Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddTodolistActionType, RemoveTodolistActionType} from './todolists-reducer';\r\nimport {TasksStateType} from '../App';\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK',\r\n    todolistId: string\r\n    taskId: string\r\n}\r\n\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK',\r\n    todolistId: string\r\n    title: string\r\n}\r\n\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS',\r\n    todolistId: string\r\n    taskId: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE',\r\n    todolistId: string\r\n    taskId: string\r\n    title: string\r\n}\r\n\r\ntype ActionsType = RemoveTaskActionType | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = tasks.filter(t => t.id != action.taskId);\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state}\r\n            const newTask: TaskType = {\r\n                id: v1(),\r\n                title: action.title,\r\n                isDone: false\r\n            }\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = [newTask, ...tasks];\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            let todolistTasks = state[action.todolistId];\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId ? {...t, isDone: action.isDone} : t);\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({...state});\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            let todolistTasks = state[action.todolistId];\r\n            // найдём нужную таску:\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId ? {...t, title: action.title} : t);\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({...state});\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state};\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', taskId: taskId, todolistId: todolistId}\r\n}\r\nexport const addTaskAC = (title: string, todolistId: string): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', title, todolistId}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todolistId: string): ChangeTaskStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS', isDone, todolistId, taskId}\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', title, todolistId, taskId}\r\n}\r\n\r\n","C:\\Users\\screen\\Desktop\\todolist-13\\src\\state\\todolists-reducer.ts",["75"],"import {v1} from 'uuid';\r\nimport {FilterValuesType, TodolistType} from '../App';\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST',\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST',\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype ActionsType = RemoveTodolistActionType | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n\r\nconst initialState: Array<TodolistType> =  []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistType> = initialState, action: ActionsType): Array<TodolistType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id != action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [{\r\n                id: action.todolistId,\r\n                title: action.title,\r\n                filter: 'all'\r\n            }, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state]\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return { type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const addTodolistAC = (title: string): AddTodolistActionType => {\r\n    return { type: 'ADD-TODOLIST', title: title, todolistId: v1()}\r\n}\r\nexport const changeTodolistTitleAC = (id: string, title: string): ChangeTodolistTitleActionType => {\r\n    return { type: 'CHANGE-TODOLIST-TITLE', id: id, title: title}\r\n}\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType): ChangeTodolistFilterActionType => {\r\n    return { type: 'CHANGE-TODOLIST-FILTER', id: id, filter: filter}\r\n}\r\n\r\n","C:\\Users\\screen\\Desktop\\todolist-13\\src\\Todolist.tsx",["76","77","78","79","80"],"import React, {useCallback} from 'react'\r\nimport {AddItemForm} from './AddItemForm'\r\nimport {EditableSpan} from './EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task'\r\nimport {FilterValuesType} from './App';\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.isDone === false)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.isDone === true)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                          removeTask={props.removeTask}\r\n                                          changeTaskTitle={props.changeTaskTitle}\r\n                                          changeTaskStatus={props.changeTaskStatus}\r\n                    />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","C:\\Users\\screen\\Desktop\\todolist-13\\src\\AddItemForm.tsx",["81","82","83"],"import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function(props: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","C:\\Users\\screen\\Desktop\\todolist-13\\src\\EditableSpan.tsx",[],"C:\\Users\\screen\\Desktop\\todolist-13\\src\\Task.tsx",["84","85","86"],"import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from './EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskType} from './Todolist'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.isDone ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.isDone}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","C:\\Users\\screen\\Desktop\\todolist-13\\src\\stories\\todolists-api.stories.tsx",["87","88","89"],"C:\\Users\\screen\\Desktop\\todolist-13\\src\\stories\\NewComponent.tsx",[],["90","91"],"C:\\Users\\screen\\Desktop\\todolist-13\\src\\API\\todolist-api.ts",["92","93"],{"ruleId":"94","severity":1,"message":"95","line":1,"column":29,"nodeType":"96","messageId":"97","endLine":1,"endColumn":39},{"ruleId":"94","severity":1,"message":"98","line":1,"column":41,"nodeType":"96","messageId":"97","endLine":1,"endColumn":49},{"ruleId":"94","severity":1,"message":"99","line":13,"column":5,"nodeType":"96","messageId":"97","endLine":13,"endColumn":21},{"ruleId":"94","severity":1,"message":"100","line":15,"column":73,"nodeType":"96","messageId":"97","endLine":15,"endColumn":85},{"ruleId":"94","severity":1,"message":"101","line":32,"column":9,"nodeType":"96","messageId":"97","endLine":32,"endColumn":20},{"ruleId":"94","severity":1,"message":"102","line":33,"column":9,"nodeType":"96","messageId":"97","endLine":33,"endColumn":20},{"ruleId":"103","severity":1,"message":"104","line":42,"column":8,"nodeType":"105","endLine":42,"endColumn":10,"suggestions":"106"},{"ruleId":"103","severity":1,"message":"104","line":47,"column":8,"nodeType":"105","endLine":47,"endColumn":10,"suggestions":"107"},{"ruleId":"103","severity":1,"message":"104","line":52,"column":8,"nodeType":"105","endLine":52,"endColumn":10,"suggestions":"108"},{"ruleId":"103","severity":1,"message":"104","line":57,"column":8,"nodeType":"105","endLine":57,"endColumn":10,"suggestions":"109"},{"ruleId":"103","severity":1,"message":"104","line":62,"column":8,"nodeType":"105","endLine":62,"endColumn":10,"suggestions":"110"},{"ruleId":"103","severity":1,"message":"104","line":67,"column":8,"nodeType":"105","endLine":67,"endColumn":10,"suggestions":"111"},{"ruleId":"103","severity":1,"message":"104","line":72,"column":8,"nodeType":"105","endLine":72,"endColumn":10,"suggestions":"112"},{"ruleId":"113","severity":1,"message":"114","line":45,"column":53,"nodeType":"115","messageId":"116","endLine":45,"endColumn":55},{"ruleId":"113","severity":1,"message":"114","line":33,"column":45,"nodeType":"115","messageId":"116","endLine":33,"endColumn":47},{"ruleId":"103","severity":1,"message":"117","line":35,"column":8,"nodeType":"105","endLine":35,"endColumn":33,"suggestions":"118"},{"ruleId":"103","severity":1,"message":"117","line":42,"column":8,"nodeType":"105","endLine":42,"endColumn":45,"suggestions":"119"},{"ruleId":"103","severity":1,"message":"117","line":44,"column":86,"nodeType":"105","endLine":44,"endColumn":116,"suggestions":"120"},{"ruleId":"103","severity":1,"message":"117","line":45,"column":92,"nodeType":"105","endLine":45,"endColumn":122,"suggestions":"121"},{"ruleId":"103","severity":1,"message":"117","line":46,"column":98,"nodeType":"105","endLine":46,"endColumn":128,"suggestions":"122"},{"ruleId":"94","severity":1,"message":"123","line":2,"column":9,"nodeType":"96","messageId":"97","endLine":2,"endColumn":12},{"ruleId":"94","severity":1,"message":"124","line":2,"column":14,"nodeType":"96","messageId":"97","endLine":2,"endColumn":20},{"ruleId":"94","severity":1,"message":"125","line":2,"column":22,"nodeType":"96","messageId":"97","endLine":2,"endColumn":33},{"ruleId":"103","severity":1,"message":"117","line":15,"column":97,"nodeType":"105","endLine":15,"endColumn":130,"suggestions":"126"},{"ruleId":"103","severity":1,"message":"117","line":20,"column":8,"nodeType":"105","endLine":20,"endColumn":41,"suggestions":"127"},{"ruleId":"103","severity":1,"message":"117","line":24,"column":8,"nodeType":"105","endLine":24,"endColumn":41,"suggestions":"128"},{"ruleId":"94","severity":1,"message":"129","line":4,"column":8,"nodeType":"96","messageId":"97","endLine":4,"endColumn":13},{"ruleId":"130","severity":1,"message":"131","line":7,"column":1,"nodeType":"132","endLine":10,"endColumn":2},{"ruleId":"94","severity":1,"message":"133","line":11,"column":7,"nodeType":"96","messageId":"97","endLine":11,"endColumn":15},{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","replacedBy":"137"},{"ruleId":"94","severity":1,"message":"138","line":9,"column":6,"nodeType":"96","messageId":"97","endLine":9,"endColumn":32},{"ruleId":"94","severity":1,"message":"139","line":17,"column":6,"nodeType":"96","messageId":"97","endLine":17,"endColumn":18},"@typescript-eslint/no-unused-vars","'useReducer' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'todolistsReducer' is defined but never used.","'tasksReducer' is defined but never used.","'todolistId1' is assigned a value but never used.","'todolistId2' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["140"],["141"],["142"],["143"],["144"],["145"],["146"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["147"],["148"],["149"],["150"],["151"],"'Box' is defined but never used.","'Button' is defined but never used.","'FormControl' is defined but never used.",["152"],["153"],["154"],"'axios' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'settings' is assigned a value but never used.","no-native-reassign",["155"],"no-negated-in-lhs",["156"],"'CreateTodolistResponseType' is defined but never used.","'ResponseType' is defined but never used.",{"desc":"157","fix":"158"},{"desc":"157","fix":"159"},{"desc":"157","fix":"160"},{"desc":"157","fix":"161"},{"desc":"157","fix":"162"},{"desc":"157","fix":"163"},{"desc":"157","fix":"164"},{"desc":"165","fix":"166"},{"desc":"165","fix":"167"},{"desc":"165","fix":"168"},{"desc":"165","fix":"169"},{"desc":"165","fix":"170"},{"desc":"165","fix":"171"},{"desc":"165","fix":"172"},{"desc":"165","fix":"173"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [dispatch]",{"range":"174","text":"175"},{"range":"176","text":"175"},{"range":"177","text":"175"},{"range":"178","text":"175"},{"range":"179","text":"175"},{"range":"180","text":"175"},{"range":"181","text":"175"},"Update the dependencies array to be: [props]",{"range":"182","text":"183"},{"range":"184","text":"183"},{"range":"185","text":"183"},{"range":"186","text":"183"},{"range":"187","text":"183"},{"range":"188","text":"183"},{"range":"189","text":"183"},{"range":"190","text":"183"},[1456,1458],"[dispatch]",[1632,1634],[1841,1843],[2055,2057],[2259,2261],[2411,2413],[2595,2597],[1177,1202],"[props]",[1415,1452],[1542,1572],[1666,1696],[1796,1826],[693,726],[955,988],[1145,1178]]